//! Error types

use num_derive::FromPrimitive;
use solana_program::{
    decode_error::DecodeError,
    msg,
    program_error::{PrintProgramError, ProgramError},
};
use thiserror::Error;

/// Errors that may be returned by the program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum LiquidityPoolsError {
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner,
    /// Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,
    /// Data type mismatch
    #[error("Data type mismatch")]
    DataTypeMismatch,
    /// Ammount allowed of interest on the borrowing is exceeded
    #[error("Ammount allowed of interest on the borrowing is exceeded")]
    AmountAllowedCheckFailed,
}

impl PrintProgramError for LiquidityPoolsError {
    fn print<E>(&self) {
        msg!("Error: {}", &self.to_string());
    }
}

impl From<LiquidityPoolsError> for ProgramError {
    fn from(e: LiquidityPoolsError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl<T> DecodeError<T> for LiquidityPoolsError {
    fn type_of() -> &'static str {
        "LiquidityPoolsError"
    }
}
